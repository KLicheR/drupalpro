diff --git a/drush_addons/quickstart/quickstart.drush.inc b/drush_addons/quickstart/quickstart.drush.inc
index 285de96..15dcb0f 100644
--- a/drush_addons/quickstart/quickstart.drush.inc
+++ b/drush_addons/quickstart/quickstart.drush.inc
@@ -102,6 +102,35 @@ function quickstart_drush_command() {
           'aliases' => array('qf'),
           'bootstrap' => DRUSH_BOOTSTRAP_DRUSH, // No bootstrap at all.
   );
+  
+  $items['quickstart-archive'] = array(
+          'description' => "Make an archive of a development website. The tarball will be create in ~/websites/",
+          'arguments' => array(
+          ),
+          'options' => array(
+                  'domain' => 'Required.  Domain name to archive.',
+          ),
+          'examples' => array(
+                  'Simplest format' => 'drush qa --domain=example.dev',
+          ),
+          'aliases' => array('qa'),
+          'bootstrap' => DRUSH_BOOTSTRAP_DRUSH, // No bootstrap at all.
+  );
+  
+  $items['quickstart-restore'] = array(
+          'description' => "Build a development website from a developement website archive.",
+          'arguments' => array(
+          ),
+          'options' => array(
+                  'domain' => 'Required.  Domain name to create.',
+                  'archive' => 'Required.  Path to the archive tarball.',
+          ),
+          'examples' => array(
+                  'Simplest format' => 'drush qr --domain=example.dev --archive=path/to/archive.tar.gz',
+          ),
+          'aliases' => array('qr'),
+          'bootstrap' => DRUSH_BOOTSTRAP_DRUSH, // No bootstrap at all.
+  );
   return $items;
 }
 
@@ -317,3 +346,139 @@ function drush_quickstart_destroy() {
   drush_log("Command completed successfully.", "success");
   return true;
 }
+
+/**
+ * Drush callback function for 'drush quickstart-archive'.
+ *
+ * Backup a development website recoverable with 'drush quickstart-restore'.
+ *
+ * @return true on success
+ */
+function drush_quickstart_archive() {
+  $params = _quickstart_params(array('domain'));
+  if (isset($params['fail'])) return drush_set_error(0, dt('Bad parameters.  Try "drush help quickstart-archive"'));
+
+  $codepath = $params['codepath'];
+  $websites_path = quickstart_fixpath("~/websites/");
+  $domain = $params['domain'];
+  
+  // Check if a development website with this domain exists.
+  // Code
+  $check_file = $codepath . '/index.php';
+  if (!file_exists($check_file)) {
+    return drush_set_error(0, dt('No development website with this domain was founded.'));
+  }
+  
+  $domain_ = $params['domain_'];
+  
+  drush_log(' ', 'ok'); // add newline at top of output
+  
+  try {
+    drush_log("Archiving $domain ...", 'ok');
+    $backup_name = $domain.'_'.date('Ymd_His');
+    $tmp_codepath = $websites_path . $backup_name;
+    $targz_path = $websites_path . $backup_name . '.tar.gz';
+    $sql_file_path = $tmp_codepath.'/dump.sql';
+    // Code
+    drush_log("Preparing code of $domain ...", 'ok');
+    quickstart_shell_exec("cp -R $codepath $tmp_codepath");
+    quickstart_shell_exec("sed -i \"s/'\(database\|username\|password\)' => '".$domain_."',/'\\1' => '#######_###',/g\" $tmp_codepath/sites/default/settings.php");
+    // Database
+    drush_log("Preparing database of $domain ...", 'ok');
+    drush_log("Clearing cache of $domain", 'ok');
+    drush_invoke_process(
+      drush_sitealias_get_record('@self'),
+      'cc',
+      array("all"),
+      array("--root=$codepath"),
+      array('#integrate' => TRUE)
+    );
+    drush_log("MySQL dump of $domain_ and standardization ...", 'ok');
+    quickstart_shell_exec("mysqldump $domain_ --add-drop-table --user=".$params['dbuser']." --password=".$params['dbpassword']." > $sql_file_path");
+    quickstart_shell_exec('sed -i "s/'.str_replace('.', '\.', $domain).'/#######.###/g" '.$sql_file_path);
+    // Compression
+    drush_log("Exporting tarball to ~/websites/ ...", 'ok');
+    quickstart_shell_exec("tar -czf $targz_path -C ".$websites_path.$backup_name." .");
+    quickstart_shell_exec("rm -rf $tmp_codepath");
+  } catch (Exception $e) {
+    $message = $e->getMessage();
+    drush_log("Command failed: $message", "error");
+    return false;
+  }
+
+  drush_log("Command completed successfully.", "success");
+  return true;
+}
+
+/**
+ * Drush callbackfunction for 'drush quickstart-restore'.
+ *
+ * Create a new development website from a tarball from
+ * 'drush quickstart-archive'.
+ *
+ * @return true on success
+ */
+function drush_quickstart_restore() {
+  $params = _quickstart_params(array('domain', 'archive'));
+  if (isset($params['fail'])) return drush_set_error(0, dt('Bad parameters.  Try "drush help quickstart-restore"'));
+  $domain = $params['domain'];
+  $domain_ = $params['domain_'];
+  $codepath = $params['codepath'];
+  $archive = $params['archive'];
+  if (!file_exists($archive)) {
+    return drush_set_error(0, dt('The archive file could not be found.'));
+  }
+  
+  // Check if a development website with this domain exists
+  // Code
+  $check_file = $codepath . '/index.php';
+  if (file_exists($check_file)) {
+    return drush_set_error(0, dt('This domain already exists as a development website.'));
+  }
+  
+  drush_log(' ', 'ok'); // add newline at top of output
+  
+  try {
+    // DNS
+    drush_log("Creating dns config (add $domain to /etc/hosts) ...", 'ok');
+    quickstart_create_dns($domain, $params);
+    drush_log('                                                ... done.', 'ok');
+    // Code
+    drush_log("Extracting code to $codepath ...", 'ok');
+    quickstart_shell_exec("mkdir $codepath");
+    quickstart_shell_exec("tar zxf $archive -C $codepath");
+    quickstart_shell_exec("sed -i \"s/'\(database\|username\|password\)' => '#######_###',/'\\1' => '".$domain_."',/g\" $codepath/sites/default/settings.php");
+    drush_invoke_process(
+      drush_sitealias_get_record('@self'),
+      'quickstart-fixperms',
+      array(),
+      array("--domain=$domain", "--codepath=$codepath"),
+      array('#integrate' => TRUE)
+    );
+    drush_log('                                                ... done.', 'ok');
+    // Database
+    drush_log("Creating database from dump.sql: $domain_", 'ok');
+    quickstart_create_database($domain, $params);
+    // General replacing of the domain
+    quickstart_shell_exec('sed -i "s/#######\.###/'.$domain.'/g" '.$codepath.'/dump.sql');
+    // Correcting of lenght of string in PHP serialized
+    $new_dump_sql = preg_replace_callback('/(s:)([0-9]*)(:\\\")([^"]*'.str_replace('.', '\.', $domain).'[^"]*)(\\\")/', function ($m){
+      return($m[1].strlen($m[4]).$m[3].$m[4].$m[5]);
+    }, file_get_contents($codepath.'/dump.sql'));
+    file_put_contents($codepath.'/dump.sql', $new_dump_sql);
+    quickstart_shell_exec("mysql --user=".$params['dbuser']." --password=".$params['dbpassword']." $domain_ < $codepath/dump.sql");
+    quickstart_shell_exec("rm $codepath/dump.sql");
+    drush_log('                                                ... done.', 'ok');
+    // Apache
+    drush_log("Creating apache config (/etc/apache2/sites-enabled/$domain)", 'ok');
+    quickstart_create_apache($domain, $params);
+    drush_log('                                                ... done.', 'ok');
+  } catch (Exception $e) {
+    $message = $e->getMessage();
+    drush_log("Command failed: $message", "error");
+    return false;
+  }
+
+  drush_log("Command completed successfully.", "success");
+  return true;
+}
